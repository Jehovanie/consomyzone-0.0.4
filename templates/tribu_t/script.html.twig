<script>

let tbl_pub = "{{ table_pub }}";


let invitationsContainer = document.querySelector("#invitations");

let photosContainer = document.querySelector("#photos");

let restoContainer = document.querySelector("#restaurants");

let showCreatePub = document.querySelector("#showCreatePub");

let showPub = document.querySelector(".showPubBlock");

let table_com = tbl_pub.replace(/_publication$/, "_commentaire");

let table_resto = tbl_pub.replace(/_publication$/, "_restaurant");

const  table_restaurant_com=tbl_pub.replace(/_publication$/, "_restaurant_commentaire");



document.querySelector("#btnShowModalAddPub").addEventListener("click", () => {
    document.querySelector("#publication_legend").value = "";
    document.querySelector("#publication_confidentiality").value = "1";
});

/*function showInvitations(){

    let table = tbl_pub.replace(/_publication$/, "")

    let ul = document.createElement('ul');

    ul.classList.add("list-group");

    fetch(new Request("/user/tribu/show/invitations/" + table, {
        method: "GET",
        headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        }
    })).then(rqt => rqt.json()).then(data => {
            console.log(data);
            let li = "";
            let status = "";
            if(data.length > 0){
                for (let invitation of data) {
                    if(invitation.status == 0){
                        status = "En attente"
                    }else if(invitation.status == 1){
                        status = "Acceptée"
                    }else{
                        status = "Rejetée"
                    }
                    li += `<li class="list-group-item">
                                <a href="/user/profil/${invitation.user_id}">${invitation.fullname}</a>
                                <button class="btn btn-sm btn-secondary float-end">
                                    ${status}
                                </button>
                            </li>`;
                }
                ul.innerHTML = li;
                invitationsContainer.appendChild(ul);
            }else{
                invitationsContainer.style.textAlign = "center"
                invitationsContainer.innerHTML = "Aucune invitation pour le moment";
                photosContainer.style.display = "none"
                photosContainer.innerHTML = "";
            }

            if (invitationsContainer.style.display == "none") {
                invitationsContainer.style.display = "block"
                photosContainer.style.display = "none"
                photosContainer.innerHTML = "";
                showCreatePub.style.display = "none"
                showPub.style.display = "none"
            }else{
                invitationsContainer.innerHTML = "";               
                invitationsContainer.style.display = "none"
                showCreatePub.style.display = "block"
                showPub.style.display = "block"
                photosContainer.style.display = "none"
                photosContainer.innerHTML = "";
            }

        });
}*/

function sendInvitation(table){
    data = {"table": table}
    console.log(JSON.stringify(data));
    fetch("/user/tribu/send/invitation", {
            method: "POST",
            headers:{
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)

        } ).then(response => response.json())
        .then(text => {
            console.log(text);
            document.querySelector("#successMessageBlock").style.display = "block";
            document.querySelector("#successMessage").innerHTML = text;
            setTimeout(()=>{
                document.querySelector("#successMessageBlock").style.display="none";
            }, 5000)
    })
}

function showInvitations(){
    invitationsContainer.innerHTML = "";
    let table = tbl_pub.replace(/_publication$/, "")

    let ul = document.createElement('ul');

    ul.classList.add("list-group");

    fetch(new Request("/user/tribu/show/invitations/" + table, {
        method: "GET",
        headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        }
    })).then(rqt => rqt.json()).then(data => {
            console.log(data);
            let li = `<div id="successMessageBlock" style="margin-left:10%;display:none;margin-bottom:5px;">
					<svg color="green" class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Success:"><use xlink:href="#check-circle-fill"/>
					</svg>
					<span id="successMessage">Invitation envoyée à tous les membres</span>
				</div><div class="row mb-3" style="margin-left:3px"> <button style="margin-left:3px" class="btn btn-sm btn-outline-primary col-3" onclick='sendInvitation("{{table_tribu}}")'>
												Inviter votre tribu G
											</button>
											<a style="margin-left:3px" href="{{ path("add_member_tribut", {"tribu_name" : table_tribu }) }}" class="btn btn-sm btn-outline-primary col-3">
												Inviter une personne
											</a>
											<button style="margin-left:3px" type="button" class="btn btn-outline-danger col-3 invitation_email_home_js" data-bs-toggle="modal" data-bs-target="#modal_sendEmail" data-bs-whatever="@mdo">
												Inviter par e-mail
											</button> </div>`;
            let status = "";
	    document.querySelector("#modal_sendEmail").setAttribute("data-table", "{{table_tribu}}")
            if(data.length > 0){
                for (let invitation of data) {
                    if(invitation.status == 0){
                        status = "En attente"
                    }else if(invitation.status == 1){
                        status = "Acceptée"
                    }else{
                        status = "Rejetée"
                    }
                    li += `<li class="list-group-item">
                                <a href="/user/profil/${invitation.user_id}">${invitation.fullname}</a>
                                <button class="btn btn-sm btn-secondary float-end">
                                    ${status}
                                </button>
                            </li>`;
                }
                ul.innerHTML = li;
                invitationsContainer.appendChild(ul);
            }else{
                ul.innerHTML = li;
                invitationsContainer.appendChild(ul);
                /*invitationsContainer.style.textAlign = "center"
                invitationsContainer.innerHTML = "Aucune invitation pour le moment";
                photosContainer.style.display = "none"
                photosContainer.innerHTML = "";*/
            }

            invitationsContainer.style.display = "block"
            photosContainer.style.display = "none"
            photosContainer.innerHTML = "";
            restoContainer.style.display = "none"
            restoContainer.innerHTML = "";
            showCreatePub.style.display = "none"
            showPub.style.display = "none"

            /*if (invitationsContainer.style.display == "none") {
                invitationsContainer.style.display = "block"
                photosContainer.style.display = "none"
                photosContainer.innerHTML = "";
                restoContainer.style.display = "none"
                restoContainer.innerHTML = "";
                showCreatePub.style.display = "none"
                showPub.style.display = "none"
            }else{
                invitationsContainer.innerHTML = "";               
                invitationsContainer.style.display = "none"
                showCreatePub.style.display = "block"
                showPub.style.display = "block"
                photosContainer.style.display = "none"
                photosContainer.innerHTML = "";
                restoContainer.style.display = "none"
                restoContainer.innerHTML = "";
            }*/

        });
}

function showActualites(){
    invitationsContainer.innerHTML = "";               
    invitationsContainer.style.display = "none"
    showCreatePub.style.display = "block"
    showPub.style.display = "block"
    photosContainer.style.display = "none"
    photosContainer.innerHTML = "";
    restoContainer.style.display = "none"
    restoContainer.innerHTML = "";
}

function showPhotos(table_pub){
    /*
    let icone = document.createElement('i');
    icone.classList.add("bi");
    icone.classList.add("bi-arrows-collapse");
    icone.style.cursor = "pointer";
    photosContainer.appendChild(icone);
    */
    photosContainer.innerHTML = "";

    fetch(new Request("/user/tribu/photos/" + table_pub, {
        method: "GET",
        headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        }
    })).then(rqt => rqt.json()).then(data => {
            console.log(data);
            if(data.length > 0){
                for (let photo of data) {
                    let img = document.createElement('img');
                    //img.classList.add("w-25");
                    img.style.height = "150px"
                    img.style.width = "24%"
                    img.style.cursor = "pointer"
                    img.style.marginBottom = "2px"
                    img.style.marginLeft = "2px"
                    img.style.borderRadius = "5px"
                    //img.src = '/assets/publications/photos/'+photo.photo;
		    img.src = "{{asset('assets/publications/photos/')}}"+photo.photo;
                    photosContainer.appendChild(img);
                }
            }else{
                photosContainer.style.textAlign = "center"
                photosContainer.innerHTML = "Aucune photo pour le moment";
                invitationsContainer.innerHTML = "";               
                invitationsContainer.style.display = "none"
                restoContainer.style.display = "none"
                restoContainer.innerHTML = "";
            }

            invitationsContainer.innerHTML = "";               
            invitationsContainer.style.display = "none"
            restoContainer.style.display = "none"
            restoContainer.innerHTML = "";
            photosContainer.style.display = "block"
            showCreatePub.style.display = "none"
            showPub.style.display = "none"

            /*if (photosContainer.style.display == "none") {
                invitationsContainer.innerHTML = "";               
                invitationsContainer.style.display = "none"
                restoContainer.style.display = "none"
                restoContainer.innerHTML = "";
                photosContainer.style.display = "block"
                showCreatePub.style.display = "none"
                showPub.style.display = "none"
            }else{
                photosContainer.innerHTML = "";               
                photosContainer.style.display = "none"
                restoContainer.style.display = "none"
                restoContainer.innerHTML = "";
                showCreatePub.style.display = "block"
                showPub.style.display = "block"
                invitationsContainer.innerHTML = "";               
                invitationsContainer.style.display = "none"
            }*/

        });

}






function showComment(id_restaurant){

    if(document.querySelectorAll(`#RestoModalComment${id_restaurant} > div > div > div.modal-body>div.card-comment`).length >0){
        const children=document.querySelectorAll(`#RestoModalComment${id_restaurant} > div > div > div.modal-body>div.card-comment`)
        //const children=document.querySelector(`#RestoModalComment${id_restaurant} > div > div > div.modal-body`).children
        for(let child of children){
            console.log(child)
            child.parentNode.removeChild(child)
        }
    }

   
    fetch(new Request("/user/comment/tribu/restos-pastilles/"+ table_resto+"/"+id_restaurant , {

        method: "GET",
        headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        }
    })).then(rqt => rqt.json()).then(restos => {
       
            
        for (let resto of restos) {
            // console.log(resto)
            let id_user = resto.id_user
            let pseudo = resto.pseudo
            let commentaire = resto.commentaire
            let note=resto.note
             if(document.querySelector(`#RestoModalComment${id_restaurant} > div > div > div.modal-body`)){
                document.querySelector(`#RestoModalComment${id_restaurant} > div > div > div.modal-body`).innerHTML += `
                    <div class="card card-comment mb-3"> 
                        <div class="card_head">
                            <h4 class="pseudo"><i class="fa-solid fa-user"></i> ${pseudo}</h4> 
                        </div>
                        <hr>
                        <div class="card_body">
                            <div class="content row mt-3">
                                <div class="commentaire col-8">
                                    <p>${commentaire}</p>
                                </div>
                                <div class="note col-4" id="etoil-comment-${id_user}">
                                    <i class="fa-solid fa-star" data-rank="1"></i>
                                    <i class="fa-solid fa-star" data-rank="2"></i>
                                    <i class="fa-solid fa-star" data-rank="3"></i>
                                    <i class="fa-solid fa-star" data-rank="4"> </i>
                                </div>
                            </div>
                        </div>
                    <div>
                `
              
            }
            //TODO: color stars

            let rankRange = [1, 2, 3, 4]
            let etoils = document.querySelectorAll(`#etoil-comment-${id_user} > i`)
            for( let etoil of etoils){
                if (rankRange.includes(parseInt(etoil.dataset.rank, 10))) {
                    if(parseInt(etoil.dataset.rank, 10) <= Math.trunc(note)){
                        etoil.style.color = "#F5D165"
                    }
                }
            }

        }

    })


   


}



function showResto(){

    restoContainer.innerHTML = ""
    if(document.getElementById('list_resto_pastilled')){
        let childreen=document.getElementById('list_resto_pastilled').children
        for(let child of childreen)
             document.getElementById('list_resto_pastilled').
                removeChild(child)
    }
       


    fetch(new Request("/user/tribu/restos-pastilles/" + table_resto, {
        method: "GET",
        headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        }
    })).then(rqt => rqt.json()).then(restos => {
            console.log(restos);
            let imgSrc = "";
            let avatar = "{{avatar}}"
            if(avatar != null){
                imgSrc = "/uploads/tribus/photos/"+avatar
            }else{
                imgSrc = "uploads/tribus/photos/avatar_tribu.jpg"
            }

            if(restos.length > 0){
                let ul = null
                if(!document.getElementById('list_resto_pastilled')){
                    ul = document.createElement('ul');
                    ul.id="list_resto_pastilled"
                }else
                    ul=document.getElementById('list_resto_pastilled')
              
                let li = ""
                let text=""
                let text1=""
                let id_c_u = document.querySelector("#settingProfilId > div").dataset.tribuUsRank
                console.log()
                for (let resto of restos) {
                        let id = resto.id
                        let id_resto = resto.id_resto
                        let id_resto_comment = resto.All_id_r_com!=null ?  resto.All_id_r_com.split(",") :[]
                        
                        let id_user = resto.All_user!=null ? resto.All_user.split(",") :[]
                        console.log(id_user)
                        let denominationsF = resto.denomination_f
                        let nbrAvis= resto.nbrAvis
                        let key=0
                        for(let [k,v] of id_user.entries() ){
                            if(v === id_c_u)
                              key=k
                        }
                        if(id_user.includes(id_c_u)){
                           console.log("up "+denominationsF)
                            text=`<button type="button" class="btn btn-primary mt-3" id="Submit-Avis-resto-tribu-t-tom-js" data-bs-toggle="modal" data-bs-target="#RestoModalNote${id_resto_comment[key]}" onclick="updateNote(event,${id_resto_comment[key]})">Modifiez votre avis</button>`

                            text1="Modifiez votre avis"
                        }else{
                            console.log("crt "+denominationsF)
                            text=`<button type="button" class="btn btn-primary mt-3" id="Submit-Avis-resto-tribu-t-tom-js" data-bs-toggle="modal" data-bs-target="#RestoModalNote${id_resto_comment[key]}" onclick="sendNote(event,{{app.user.id}},${id},${id_resto_comment[key]})">Notez</button>`
                            text1="Notez"
                        }
                        li += `
                    <li style="list-style-type:none; " data-toggle-id="${id_resto}">

                        <div class="row">
                            <div class="col-10">
                                    <span style="font-weight:700; font-size:18pt;">${denominationsF} </span> 
                                    <img style="height: 30px; width:30px; border-radius:50%;margin-top: -10px; " src="{% if avatar != null %} {{ asset("uploads/tribus/photos/") ~ avatar}} {% else %} {{ asset("uploads/tribus/photos/avatar_tribu.jpg") }} {% endif %}">
                                <div id="etoile_${id_resto}">
                                    <i class="fa-solid fa-star" data-rank="1"></i>
                                    <i class="fa-solid fa-star" data-rank="2"></i>
                                    <i class="fa-solid fa-star" data-rank="3"></i>
                                    <i class="fa-solid fa-star" data-rank="4"> </i>
                                    <a class="text-primary text-decoration-underline" style="cursor: pointer;" data-bs-toggle="modal" data-bs-target="#RestoModalComment${resto.id}" onclick="showComment(${resto.id})"> ${nbrAvis} Avis</a>
                                </div>
                            </div>
                            
                            <div class="col-2">
                                <button type="button" class="btn btn-outline-primary mt-3" data-bs-toggle="modal" data-bs-target="#RestoModalNote${id_resto_comment[key]}">${text1}</button>
                            </div>
                        </div>

                        <!-- Modal note-->
                        <div class="modal fade" id="RestoModalNote${id_resto_comment[key]}" tabindex="-1" aria-labelledby="RestoModalNoteLabel" aria-hidden="true">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title" id="RestoModalNoteLabel">Notez ${denominationsF}</h5>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                    </div>
                                    <div class="modal-body">
                                        <form>
                                            <label for="text-note" class="col-form-label">Donner une note sur 4:</label>
                                            <textarea class="form-control" id="text-note-tribu-t-${id_resto_comment[key]}"></textarea>
                                            <label for="message-text" class="col-form-label">Commentaire:</label>
                                            <textarea class="form-control" id="message-text-${id_resto_comment[key]}"></textarea>
                                        </form>
                                    </div>
                                    <div class="modal-footer">${text}</div>
                                </div>
                            </div>
                        </div>
                        <!-- Modal comment -->
                        <div class="modal fade modal-commet-tribut" id="RestoModalComment${resto.id}" tabindex="-1" aria-labelledby="RestoModalCommentLabel" aria-hidden="true">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title" id="RestoModalCommentLabel">Avis</h5>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                    </div>
                                    <div class="modal-body"></div>
                                </div>
                            </div>
                        </div>
                       
                    </li> `
                    

                }
                ul.innerHTML = li;
                restoContainer.appendChild(ul);
                restos.forEach(resto=>{

                    // let noteGlobales= 0.00
                    // if(Array.isArray(resto.note)){
                    //     let sum = 0.00;
                    //     for (let i = 0; i < resto.note.length; i++) {
                    //         sum += parseFloat(resto.note[i]);
                    //     }
                    //      noteGlobales = sum / resto.note.length
                    // }else{
                    //     noteGlobales=resto.note
                    // }
                    // let sum = 0.00;
                    // for (let i = 0; i < note.length; i++) {
                    //     sum += parseFloat(note[i]);
                    // }
                    // let noteGlobales = sum / note.length
                    // console.log(noteGlobales)
                    let id_resto = resto.id_resto
                    let noteGlobales=resto.globalNote
                    printNodeGlobale(document.querySelectorAll("#etoile_"+id_resto+">i"),noteGlobales)

                }) 


            }else{
                restoContainer.style.textAlign = "center"
                restoContainer.innerHTML = "Aucun restaurant pastillé pour le moment";
                invitationsContainer.innerHTML = "";               
                invitationsContainer.style.display = "none"
                photosContainer.style.display = "none"
                photosContainer.innerHTML = "";
            }

            restoContainer.style.display = "block"
            invitationsContainer.innerHTML = "";               
            invitationsContainer.style.display = "none"
            photosContainer.innerHTML = "";
            photosContainer.style.display = "none"
            showCreatePub.style.display = "none"
            showPub.style.display = "none"

            /*if (photosContainer.style.display == "none") {
                invitationsContainer.innerHTML = "";               
                invitationsContainer.style.display = "none"
                restoContainer.style.display = "none"
                restoContainer.innerHTML = "";
                photosContainer.style.display = "block"
                showCreatePub.style.display = "none"
                showPub.style.display = "none"
            }else{
                photosContainer.innerHTML = "";               
                photosContainer.style.display = "none"
                restoContainer.style.display = "none"
                restoContainer.innerHTML = "";
                showCreatePub.style.display = "block"
                showPub.style.display = "block"
                invitationsContainer.innerHTML = "";               
                invitationsContainer.style.display = "none"
            }*/

    });
}

function printNodeGlobale(element,globalNote){

    let rankRange = [1, 2, 3, 4]
    for (let star of element) {
        console.log(star)
        if (rankRange.includes(parseInt(star.dataset.rank, 10))) {
            if(parseInt(star.dataset.rank, 10) <= Math.trunc(globalNote))
                    star.style.color = "#F5D165"
            if (globalNote % 1 != 0) {
                //console.log(parseInt(star.dataset.rank, 10)+" "+(Math.trunc(globalNote) + 1))
                if (parseInt(star.dataset.rank, 10) == (Math.trunc(globalNote) + 1)) {
                      //console.log(parseInt(star.dataset.rank, 10)+" "+(Math.trunc(globalNote) + 1))
                    let rateYello = (globalNote % 1) *100
                    let rateBlack=100 -rateYello
                    star.style = `
                     background: linear-gradient(90deg, #F5D165 ${rateYello}%, #000 ${rateBlack}%);
                    -webkit-background-clip: text;
                    -webkit-text-fill-color: transparent;
                    `
                    
                }
            }
        }
    }
}





    


function getPub(pub_id, message, confid) {
    document.querySelector("#pub_id_modif").value = pub_id;
    document.querySelector("#option_modif").value = confid;
    document.querySelector("#message-text_modif").innerHTML = message;
}

function updatePublication() { 

		let data = {
		"pub_id": document.querySelector("#pub_id_modif").value,
		"confidentiality": document.querySelector("#option_modif").value,
		"message": document.querySelector("#message-text_modif").value
		}

		fetch(new Request("/user/tribu/update_publication/{{ table_pub }}", {
		method: "POST",
		headers: {
		'Accept': 'application/json',
		'Content-Type': 'application/json'
		},
		body: JSON.stringify(data)
		}));

        location.reload();
	
}

function setReaction(pub_id, reaction) {

    let table_reaction = "{{ table_pub }}".replace(/_publication$/, "_reaction")

    let data = {
        "pub_id": pub_id,
        "user_id_pub": document.querySelector("#user_id_" + pub_id).value,
        "is_like": reaction,
        "table_reaction": table_reaction
    }

    console.log(data)

    fetch(new Request("/user/tribu/new_reaction", {
        method: "POST",
        headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
    })).then(x => x.json()).then(response => console.log(response));

}

function IsLike(pub_id, x) {
    if (x.classList == "bi-heart-fill") {
        x.classList.remove("bi-heart-fill")
        x.classList.toggle("bi-heart");
        x.style.color = "black";
        setReaction(pub_id, 0);
    } else {
        x.classList.remove("bi-heart")
        x.classList.add("bi-heart-fill");
        x.style.color = "red";
        setReaction(pub_id, 1);
        console.log("addedd...")
    }

}

let boutons = document.querySelectorAll("[id^=submitComment_]");
let forms = document.querySelectorAll("[id^=form_]");
forms.forEach((bouton) => {

    let i = bouton.id.replace(/[^0-9]/g, "");
    
    bouton.addEventListener("submit", (e) => {
        e.preventDefault();
        //let i = e.target.id.replace(/[^0-9]/g, "");

        console.log("i : " + i);

        console.log("table_com : " + table_com);

        let data = {
            "table_com": table_com,
            "pub_id": document.querySelector("#pub_id_" + i).value,
            "user_id_pub": document.querySelector("#user_id_" + i).value,
            "new_comment": document.querySelector("#newComment_" + i).value,
            "audio" : document.querySelector("#audio_" + i) ? document.querySelector("#audio_" + i).src : ""
        }

        if (document.querySelector("#newComment_" + i).value != "" || document.querySelector("#audio_" + i) != null) {

            fetch(new Request("/user/tribu/new_commentaire", {
                method: "POST",
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            }));

            document.querySelector("#newComment_" + i).value = "";
            bouton.querySelector("#soundClips > div.clip").remove();
            bouton.querySelector("#soundClips > div.iconeDelete").remove();
            bouton.querySelector("#soundClips").style.display="none"

        } else {
           
            document.querySelector("#comment_vide_" + i).style.display = "block";
            setTimeout(() => {
                document.querySelector("#comment_vide_" + i).style.display = "none";
            }, 2000);
        }
    });

    let pubId = bouton.id.replace(/[^0-9]/g, "");

    let source = new EventSource("/events/commentaires?pub_id=" + pubId + "&table=  {{ table_pub }}", { withCredentials: true });

    source.onmessage = function (event) {

        let nbrReact = JSON.parse(event.data)[0].reaction;

        let contentNbReaction = document.querySelector("#nombreReaction" + pubId);

        if (nbrReact > 0) {
            contentNbReaction.textContent = nbrReact
        } else {
            contentNbReaction.textContent = "";
        }

        if(JSON.parse(event.data)[0].reactionStatus == 1){
            contentNbReaction.nextElementSibling.classList.remove("bi-heart");
            contentNbReaction.nextElementSibling.classList.add("bi-heart-fill");
            contentNbReaction.nextElementSibling.style.color = "red";
        }else{
            contentNbReaction.nextElementSibling.classList.remove("bi-heart-fill");
            contentNbReaction.nextElementSibling.classList.add("bi-heart");
            contentNbReaction.nextElementSibling.style.color = "black";
        }

        let comments = "";
        let commentSize = JSON.parse(event.data)[0].comments.length;

        if (commentSize > 0) {
            document.querySelector("#commentNotnul_" + pubId).style.display = "block";
            document.querySelector("#nbComment" + pubId).innerHTML = commentSize + " <i class='bi bi-chat-square'></i>";
        }else{
            document.querySelector("#commentNotnul_" + pubId).style.display = "none";
            document.querySelector("#nbComment" + pubId).innerHTML = "<i class='bi bi-chat-square'></i>";
        }

        function showRemoveUpdateComment(id){
            let drop = `<span class="float-end dropstart">
                <span id="modifComs" class="float-end" style="cursor:pointer" data-bs-toggle="dropdown">
                    <i class="bi bi-three-dots" style="cursor:pointer"></i>
                </span>
                <ul class="dropdown-menu">
                    <li>
                        <button data-bs-toggle="modal" data-bs-target="#modal_commentaire_modif" class="dropdown-item" onclick="restoreComment(${id})" >Modifier</button>
                    </li>
                    <li>
                        <button onclick="confirmComment(${id})" data-bs-toggle="modal" data-bs-target="#deleteCommModalConfirm" class="dropdown-item" >Supprimer</button>
                    </li>
                </ul>
            </span>`;

            return drop;
        }

        let dropContent = "";

        for (let result of JSON.parse(event.data)[0].comments) {
            let audio = "";

            if(result.audioname){
                audio = `<audio controls class="mt-2" src="/uploads/users/audios/${result.audioname}"></audio>`;
            }

            if(result.user_id != {{ app.user.id }}){
                dropContent = "";
            }else{
                dropContent = showRemoveUpdateComment(result.id);
            }
            comments += `<div class="row card m-1 pt-2 pl-3">
                                            <label><i class="bi bi-person-circle"></i>
                                            <a href="/user/profil/${result.user_id
                }"> ${result.userfullname
                } </a><small>${diff4humans(new Date(JSON.parse(event.data)[0].now_date), new Date(result.datetime))
                }</small>${dropContent}
                                            </label><p id="content_comment_number_${result.id}">${result.commentaire
                }<br>${audio}</p>
                                        </div>`;
        }

        document.querySelector("#comment" + pubId + " > div").innerHTML = comments;

    };

    /* For sending media recorder */

    var mediaRecorder
    let record = bouton.querySelector("#start")
    let stop = bouton.querySelector("#stop")
    let soundClips = bouton.querySelector("#soundClips")

    let dateForName = new Date();
    let month = parseInt(dateForName.getMonth()) + 1
    if(String(month).length < 2){
        month = String("0"+month)
    }

    let dateString = dateForName.getDate() + "_" + month + "_" + dateForName.getFullYear();

    record.addEventListener('click', event => {
        if (navigator.mediaDevices) {
        console.log("getUserMedia supported.");

        const constraints = { audio: true };
        let chunks = [];

        navigator.mediaDevices
            .getUserMedia(constraints)
            .then((stream) => {
            mediaRecorder = new MediaRecorder(stream);

            //visualize(stream);

            mediaRecorder.start();
            console.log(mediaRecorder.state);
            console.log("recorder started");
            record.style.display = "none";
            stop.style.display = "block";

            mediaRecorder.onstop = (e) => {
                console.log("data available after MediaRecorder.stop() called.");

                //const clipName = prompt("Enter a name for your sound clip");

                const clipName = dateString+".oga";
                const clipContainer = document.createElement("div");
                const iconContainer = document.createElement("div");
                //clipContainer.classList.add("container");
                clipContainer.classList.add("col-5");
                iconContainer.classList.add("col-1");
                const audio = document.createElement("audio");
                audio.id = "audio_"+i;
                const deleteButton = document.createElement("i");

                clipContainer.classList.add("clip");
                iconContainer.classList.add("iconeDelete");
                audio.setAttribute("controls", "");
                audio.classList.add("ml-5");
                deleteButton.classList.add("bi");
                deleteButton.classList.add("bi-trash3");
                deleteButton.style.color = "red"
                deleteButton.style.marginLeft = "5px"
                deleteButton.style.cursor = "pointer"
                deleteButton.style.fontSize = "30px"
                clipContainer.appendChild(audio);
                iconContainer.appendChild(deleteButton);
                soundClips.appendChild(clipContainer);
                soundClips.appendChild(iconContainer);
                soundClips.classList.add("mt-3");

                bouton.querySelector("#soundClips").style.display = ""
                
                audio.controls = true;
                const blob = new Blob(chunks, { type: "audio/mp3; codecs=opus" });
                chunks = [];
                console.log(blob)
                //const audioURL = URL.createObjectURL(blob);
                //audio.src = audioURL;
                //console.log("recorder stopped");

                var reader = new FileReader();
                reader.readAsDataURL(blob);
                reader.onloadend = function () {
                var base64String = reader.result;
                audio.src = base64String
                console.log('Base64 String - ', base64String);
                }

                deleteButton.onclick = (e) => {
                const evtTgt = e.target;
                evtTgt.parentNode.parentNode.removeChild(evtTgt.parentNode.previousElementSibling);
                evtTgt.parentNode.parentNode.removeChild(evtTgt.parentNode);
                soundClips.classList.remove("mt-3");
                //evtTgt.parentNode.parentNode.remove();
                };
            };

            mediaRecorder.ondataavailable = (e) => {
                chunks.push(e.data);
            };
            })
            .catch((err) => {
            alert("Veuillez vérifier votre micro !");
            console.error(`The following error occurred: ${err}`);
            });
        }
    });

    stop.addEventListener('click', event => {
        mediaRecorder.stop();
        console.log(mediaRecorder.state);
        console.log("recorder stopped");
        record.style.display = "block";
        stop.style.display = "none";
    });

})

function removePub(btn, id){
    btn.parentElement.parentElement.parentElement.parentElement.parentElement.remove();
    fetch(new Request("/user/tribu/publication/remove/{{ table_pub}}/" + id, {
        method: "GET",
        headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        }
    })).then(rqt => rqt.json()).then(data => console.log(data));
}

function confirmComment(pub_id){
            
    document.querySelector("#data-pub-id-comm").value = pub_id;

}

function confirm(pub_id){
            
    document.querySelector("#data-pub-id").value = pub_id;

}

function removePublication(elem){
    document.querySelector("#pub_number_"+elem.value+"_remove").remove();
    fetch(new Request("/user/tribu/publication/remove/{{ table_pub}}/" + elem.value, {
        method: "GET",
        headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        }
    })).then(rqt => rqt.json()).then(data => console.log(data));

}

function removeCommentaire(comment_id){
    document.querySelector("#content_comment_number_"+comment_id.value).parentElement.remove();
    fetch(new Request("/user/tribu/publication/remove/"+table_com+"/" + comment_id.value, {
        method: "GET",
        headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        }
    })).then(rqt => rqt.json()).then(data => console.log(data));
}

function restoreComment(id){
    let contetComs = document.querySelector("#content_comment_number_"+id);
    document.querySelector("#comment_id_modif").value = id;
    document.querySelector("#comment_text_modif").value = contetComs.textContent;

}

function updateCommentaire(){
    let data = {
        id : document.querySelector("#comment_id_modif").value,
        commentaire : document.querySelector("#comment_text_modif").value
    }
    
    fetch(new Request("/user/tribu/update_comment/"+table_com, {
        method: "POST",
        headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
    })).then(x => x.json()).then(response => console.log(response));
    
}

function diff4humans(dateEnd, dateStart) {
    var delta = Math.round((dateEnd - dateStart) / 1000); // en seconde

    var minute = 60,
        hour = minute * 60,
        day = hour * 24,
        week = day * 7;

    var fuzzy;

    if (delta < 30) {
        fuzzy = "à l'instant";
    } else if (delta < minute) {
        fuzzy = 'il y a ' + delta + ' seconds';
    } else if (delta < 2 * minute) {
        fuzzy = 'il y a 1 minute'
    } else if (delta < hour) {
        fuzzy = 'il y a ' + Math.floor(delta / minute) + ' minutes';
    } else if (Math.floor(delta / hour) == 1) {
        fuzzy = 'il y a 1 heure'
    } else if (delta < day) {
        fuzzy = 'il y a ' + Math.floor(delta / hour) + ' heures';
    } else if (delta < day * 2) {
        fuzzy = 'hier';
    } else {
        fuzzy = 'il y a ' + Math.floor(delta / day) + ' jours';
    }

    return fuzzy;
}

let profilTribu = document.querySelector("#profilTribu");
let fileInputTribu = document.querySelector("#fileInputTribu");
let avatarTribu = "";

if(fileInputTribu ){
fileInputTribu.addEventListener("change", (e) => {

        ///read file
        const reader = new FileReader();

        ////on load file
        reader.addEventListener("load", () => {

            avatarTribu = reader.result;

            console.log(avatarTribu);

            // Change profil
            profilTribu.src = avatarTribu

            let table = tbl_pub.replace(/_publication$/, "")

            let data = {
            image : avatarTribu
            }

            fetch(new Request("/user/tribu/update/avatar/"+table, {
                method: "POST",
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })).then(x => x.json()).then(response => console.log(response));

        });

        ///run event load in file reader.
        reader.readAsDataURL(e.target.files[0]);

    }
)
}

</script>