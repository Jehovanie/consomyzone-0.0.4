<script>

var map;

let tbl_pub = "{{ table_pub }}";


let invitationsContainer = document.querySelector("#invitations");

let photosContainer = document.querySelector("#photos");

let partisantContainer = document.querySelector("#membres");

let restoContainer = document.querySelector("#restaurants");

let showCreatePub = document.querySelector("#showCreatePub");

let showCreatePub_mobile = document.querySelector("#showCreatePub_mobile");

let showPub = document.querySelector(".showPubBlock");

let table_com = tbl_pub.replace(/_publication$/, "_commentaire");

let table_tribu = tbl_pub.replace(/_publication$/, "");

let table_resto = tbl_pub.replace(/_publication$/, "_restaurant");

const  table_restaurant_com=tbl_pub.replace(/_publication$/, "_restaurant_commentaire");



document.querySelector("#btnShowModalAddPub").addEventListener("click", () => {
    document.querySelector("#publication_legend").value = "";
    document.querySelector("#publication_confidentiality").value = "1";
});


function sendInvitation(table){
    data = {"table": table}
    //console.log(JSON.stringify(data));
    fetch("/user/tribu/send/invitation", {
            method: "POST",
            headers:{
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)

        } ).then(response => response.json())
        .then(text => {
            //console.log(text);
            document.querySelector("#successMessageBlock").style.display = "block";
            document.querySelector("#successMessage").innerHTML = text;
            //showInvitations();
            setTimeout(()=>{
                document.querySelector("#successMessageBlock").style.display="none";
            }, 5000)
    })
}

function showInvitations(){
    invitationsContainer.innerHTML = "";
    let table = tbl_pub.replace(/_publication$/, "")

    let ul = document.createElement('ul');

    ul.classList.add("list-group");

    invitationsContainer.style.display = "block"
    photosContainer.style.display = "none"
    photosContainer.innerHTML = "";
    restoContainer.style.display = "none"
    restoContainer.innerHTML = "";
    showCreatePub.style.display = "none"
    showCreatePub_mobile.style.display = "none"
    showPub.style.display = "none"

    invitationsContainer.innerHTML = `<div class="mt-3 d-flex justify-content-center">
            <div class="spinner-border" role="status">
            <span class="sr-only">Loading...</span>
            </div>
        </div>`;

    fetch(new Request("/user/tribu/show/invitations/" + table, {
        method: "GET",
        headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        }
    })).then(rqt => rqt.json()).then(data => {
            //console.log(data);
        invitationsContainer.innerHTML = "";
        let li = `<div id="successMessageBlock" style="margin-left:10%;display:none;margin-bottom:5px;">
                <svg color="green" class="bi flex-shrink-0 me-2" width="24" height="24" role="img" aria-label="Success:"><use xlink:href="#check-circle-fill"/>
                </svg>
                <span id="successMessage">Invitation envoyée à tous les membres</span>
            </div><div class="row mb-3" style="margin-left:3px"> <button style="margin-left:3px" class="btn btn-sm btn-outline-primary col-3" onclick='sendInvitation("{{table_tribu}}")'>
                                            Inviter votre tribu G
                                        </button>
                                        <a style="margin-left:3px" href="{{ path("add_member_tribut", {"tribu_name" : table_tribu }) }}" class="btn btn-sm btn-outline-primary col-3">
                                            Inviter une personne
                                        </a>
                                        <button style="margin-left:3px" type="button" class="btn btn-outline-danger col-3 invitation_email_home_js" data-bs-toggle="modal" data-bs-target="#modal_sendEmail" data-bs-whatever="@mdo">
                                            Inviter par e-mail
                                        </button> </div>`;
        let status = "";
	    document.querySelector("#modal_sendEmail").setAttribute("data-table", "{{table_tribu}}")
            if(data.length > 0){
                for (let invitation of data) {
                    if(invitation.status == 0){
                        status = "En attente"
                    }else if(invitation.status == 1){
                        status = "Acceptée"
                    }else{
                        status = "Rejetée"
                    }
                    li += `<li class="list-group-item">
                                <a href="/user/profil/${invitation.user_id}">${invitation.fullname}</a>
                                <button class="btn btn-sm btn-secondary float-end">
                                    ${status}
                                </button>
                            </li>`;
                }
                ul.innerHTML = li;
                invitationsContainer.appendChild(ul);
            }else{
                ul.innerHTML = li;
                invitationsContainer.appendChild(ul);
                
            }

        });
}

function showActualites(){

    //location.reload()

    invitationsContainer.style.display = "none"
    photosContainer.style.display = "none"
    photosContainer.innerHTML = "";
    restoContainer.style.display = "none"
    restoContainer.innerHTML = "";
    showCreatePub.style.display = "block"
    showCreatePub_mobile.style.display = "block"

    showPub.style.display = "block"

    showPub.innerHTML = `<div class="mt-3 d-flex justify-content-center">
            <div class="spinner-border" role="status">
            <span class="sr-only">Loading...</span>
            </div>
        </div>`;


    fetch("/tribu_t/publications/"+tbl_pub)
        .then(response => {
            if (!response.ok) {
                throw new Error("Not 404 response", {cause: response});
            } else {
                return response.text()
            }
        })
        .catch(error => {
            console.error(error)
        })
        .then( response => {

            //alert("eto tsika szao")
            
            showPub.innerHTML = response;

        }).catch(error => {
            console.log(error)
        })
    
}

function showPhotos(table_pub){

    invitationsContainer.innerHTML = "";               
    invitationsContainer.style.display = "none"
    restoContainer.style.display = "none"
    restoContainer.innerHTML += "";
    photosContainer.style.display = "flex"
    showCreatePub.style.display = "none"
    showCreatePub_mobile.style.display = "none"
    showPub.style.display = "none"

    photosContainer.innerHTML = `<div class="mt-3 d-flex justify-content-center">
            <div class="spinner-border" role="status">
            <span class="sr-only">Loading...</span>
            </div>
        </div>`;

    fetch(new Request("/user/tribu/photos/" + table_pub, {
        method: "GET",
        headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        }
    })).then(rqt => rqt.json()).then(data => {
            //console.log(data);
            photosContainer.innerHTML = `<div class="intro">
                    <div class="alert alert-success" role="alert" style="display:none;" id="success_upload">
                        Photo télechargé avec succès!
                    </div>
                    <div><span class="h2">Liste des photos</span> <label class="input-file text-center float-end"  style="height:40px;background-color:#0D6EFD;padding:10px;border-radius:5px;color:white;cursor:pointer;"> <i class="bi bi-camera-fill"></i> Importer
                        <input onchange="loadFile(event)" type="file" name="photo" style="display:none;">
                        <img src="" alt="" id="photo-file" class="w-100" style="display:none;">
                    </label></div>
                    
                </div>`;

            if(data.length > 0){
                let li_img =''

                for (let photo of data) {

                    let img = document.createElement('img');
                    
		            let img_src = "{{asset('uploads/tribu_t/photos/') }}"+"{{ table_tribu }}/"+photo.photo;
                   
                    li_img +=`<img src="${img_src}" data-bs-toggle="modal" data-bs-target="#modal_show_photo" onclick = "setPhotoTribu(this)">`
                    
                }

                photosContainer.innerHTML+=`<div class="gallery-container"><div id="gallery">${li_img}</div></div>`

                setGallerie(document.querySelectorAll("#gallery img"))
                
            }else{
                photosContainer.style.textAlign = "center"
                photosContainer.innerHTML += "Aucune photo pour le moment";
                invitationsContainer.innerHTML = "";               
                invitationsContainer.style.display = "none"
                restoContainer.style.display = "none"
                restoContainer.innerHTML += "";
            }

        });

}


function showComment(id_restaurant){

    if(document.querySelectorAll(`#RestoModalComment${id_restaurant} > div > div > div.modal-body>div.card-comment`).length >0){
        const children=document.querySelectorAll(`#RestoModalComment${id_restaurant} > div > div > div.modal-body>div.card-comment`)
        for(let child of children){
            //console.log(child)
            child.parentNode.removeChild(child)
        }
    }

   
    fetch(new Request("/user/comment/tribu/restos-pastilles/"+ table_resto+"/"+id_restaurant , {

        method: "GET",
        headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        }
    })).then(rqt => rqt.json()).then(restos => {
       
            
        for (let resto of restos) {
            // console.log(resto)
            let id_user = resto.id_user
            let pseudo = resto.pseudo
            let commentaire = resto.commentaire
            let note=resto.note
             if(document.querySelector(`#RestoModalComment${id_restaurant} > div > div > div.modal-body`)){
                document.querySelector(`#RestoModalComment${id_restaurant} > div > div > div.modal-body`).innerHTML += `
                    <div class="card card-comment mb-3"> 
                        <div class="card_head">
                            <h4 class="pseudo"><i class="fa-solid fa-user"></i> ${pseudo}</h4> 
                        </div>
                        <hr>
                        <div class="card_body">
                            <div class="content row mt-3">
                                <div class="commentaire col-8">
                                    <p>${commentaire}</p>
                                </div>
                                <div class="note col-4" id="etoil-comment-${id_user}">
                                    <i class="fa-solid fa-star" data-rank="1"></i>
                                    <i class="fa-solid fa-star" data-rank="2"></i>
                                    <i class="fa-solid fa-star" data-rank="3"></i>
                                    <i class="fa-solid fa-star" data-rank="4"> </i>
                                </div>
                            </div>
                        </div>
                    <div>
                `
              
            }
            //TODO: color stars

            let rankRange = [1, 2, 3, 4]
            let etoils = document.querySelectorAll(`#etoil-comment-${id_user} > i`)
            for( let etoil of etoils){
                if (rankRange.includes(parseInt(etoil.dataset.rank, 10))) {
                    if(parseInt(etoil.dataset.rank, 10) <= Math.trunc(note)){
                        etoil.style.color = "#F5D165"
                    }
                }
            }

        }

    })
}

function showResto(){

    restoContainer.style.display = "block"
    invitationsContainer.innerHTML = "";               
    invitationsContainer.style.display = "none"
    photosContainer.innerHTML = "";
    photosContainer.style.display = "none"
    showCreatePub.style.display = "none"
    showCreatePub_mobile.style.display = "none"
    showPub.style.display = "none"

    restoContainer.innerHTML = `<div class="mt-3 d-flex justify-content-center">
            <div class="spinner-border" role="status">
            <span class="sr-only">Loading...</span>
            </div>
        </div>`;

    
    if(document.getElementById('list_resto_pastilled')){
        let childreen=document.getElementById('list_resto_pastilled').children
        for(let child of childreen)
             document.getElementById('list_resto_pastilled').
                removeChild(child)
    }

    fetch(new Request("/user/tribu/restos-pastilles/" + table_resto, {
        method: "GET",
        headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        }
    })).then(rqt => rqt.json()).then(restos => {
            //console.log(restos);

            restoContainer.innerHTML = `<div id="form_past"></div><div class="g-3">
                                <label>Pastiller un restaurant</label>
                                
                                <div class="input-group">
                                    <input type="text" id="resto-rech" class="form-control rounded" placeholder="Rechercher un restaurant" />
                                    <button type="button" class="btn btn-outline-primary" onclick="FindResto(this)"><i class="fas fa-search"></i></button>
                                </div>
                                <div class="list-group" style="z-index:9; position:relative;height:120px;display:none;" id="result_resto_past">
                                </div>
                            </div>`


            let imgSrc = "";
            let avatar = "{{avatar}}"
            if(avatar != null){
                imgSrc = "/uploads/tribu_t/photos/{{table_tribu}}/"+avatar
            }else{
                imgSrc = "/uploads/tribu_t/photos/avatar_tribu.jpg"
            }

            if(restos.length > 0){
                let ul = null
                if(!document.getElementById('list_resto_pastilled')){
                    ul = document.createElement('ul');
                    ul.id="list_resto_pastilled"
                }else
                    ul=document.getElementById('list_resto_pastilled')
                
                ul.classList = "list-group list-group-flush mt-2"
                let title = document.createElement('h6');
                title.innerText = "Liste des restaurants pastillés"
                title.classList ="mt-2 text-info"
                restoContainer.appendChild(title);
              
                let li = ""
                let text=""
                let text1=""
                let id_c_u = document.querySelector("#settingProfilId > div").dataset.tribuUsRank;
                //console.log(id_c_u)
                for (let resto of restos) {
                    console.log(resto);

                    //<a target="_blank" href="/restaurant/departement/${resto.departement}/${resto.id_dep}/details/${resto.id_unique}">

                    let id = resto.id
                    let id_resto = resto.id_resto
                    let id_resto_comment = resto.All_id_r_com!=null ?  resto.All_id_r_com.split(",") :[]
                    
                    let id_user = resto.All_user!=null ? resto.All_user.split(",") :[]
                    //console.log(id_user)
                    let denominationsF = resto.denomination_f
                    let nbrAvis= resto.nbrAvis
                    let key=0
                    for(let [k,v] of id_user.entries() ){
                        if(v === id_c_u)
                            key=k
                    }
                    if(id_user.includes(id_c_u)){
                        //console.log("up "+denominationsF)
                        text=`<button type="button" class="btn btn-primary mt-3" id="Submit-Avis-resto-tribu-t-tom-js" data-bs-toggle="modal" data-bs-target="#RestoModalNote${id_resto_comment[key]}" onclick="updateNote(event,${id_resto_comment[key]})">Modifiez votre avis</button>`

                        text1="Modifiez votre avis"
                    }else{
                        //console.log("crt "+denominationsF)
                        text=`<button type="button" class="btn btn-primary mt-3" id="Submit-Avis-resto-tribu-t-tom-js" data-bs-toggle="modal" data-bs-target="#RestoModalNote${id_resto_comment[key]}" onclick="sendNote(event,{{app.user.id}},${id},${id_resto_comment[key]})">Notez</button>`
                        text1="Notez"
                    }
                    li +=`<li style="list-style-type:none; " data-toggle-id="${id_resto}" class="list-group-item">
                            <div class="row">
                                <div class="col-8">
                                    <div class="fw-bold">
                                        <a target="_blank" href="/restaurant?id=${id_resto}">
                                            <img style="height: 30px; width:30px; border-radius:50%;margin-top: -10px; " src="{% if avatar != null %} {{ asset("uploads/tribu_t/photos/") ~ table_tribu ~ "/" ~ avatar}} {% else %} {{ asset("uploads/tribu_t/photos/avatar_tribu.jpg") }} {% endif %}">
                                            <span style="font-weight:700; font-size:16pt;">${denominationsF} </span> 
                                        </a>
                                    </div>
                                    <div id="etoile_${id_resto}">
                                        <i class="fa-solid fa-star" data-rank="1"></i>
                                        <i class="fa-solid fa-star" data-rank="2"></i>
                                        <i class="fa-solid fa-star" data-rank="3"></i>
                                        <i class="fa-solid fa-star" data-rank="4"> </i>
                                        <a class="text-primary text-decoration-underline" style="cursor: pointer;" data-bs-toggle="modal" data-bs-target="#RestoModalComment${resto.id}" onclick="showComment(${resto.id})"> ${nbrAvis} Avis</a>
                                    </div>
                                </div>
                                <div class="col-4">
                                    <button type="button" class="btn btn-outline-primary btn-sm me-1 mt-1" data-bs-toggle="modal" data-bs-target="#modal_repas" style="cursor:pointer;" onclick="createRepas('${resto.id_resto}','${resto.denomination_f}', '${resto.poi_y}','${resto.poi_x}')">Créer repas</button>
                                    <button type="button" class="btn btn-outline-primary btn-sm mt-1" data-bs-toggle="modal" data-bs-target="#RestoModalNote${id_resto_comment[key]}">${text1}</button>
                                </div>
                            </div>

                            <!-- Modal note-->
                            <div class="modal fade" id="RestoModalNote${id_resto_comment[key]}" tabindex="-1" aria-labelledby="RestoModalNoteLabel" aria-hidden="true">
                                <div class="modal-dialog">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title" id="RestoModalNoteLabel">Notez ${denominationsF}</h5>
                                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                        </div>
                                        <div class="modal-body">
                                            <form>
                                                <label for="text-note" class="col-form-label">Donner une note sur 4:</label>
                                                <textarea class="form-control" id="text-note-tribu-t-${id_resto_comment[key]}"></textarea>
                                                <label for="message-text" class="col-form-label">Commentaire:</label>
                                                <textarea class="form-control" id="message-text-${id_resto_comment[key]}"></textarea>
                                            </form>
                                        </div>
                                        <div class="modal-footer">${text}</div>
                                    </div>
                                </div>
                            </div>
                            <!-- Modal comment -->
                            <div class="modal fade modal-commet-tribut" id="RestoModalComment${resto.id}" tabindex="-1" aria-labelledby="RestoModalCommentLabel" aria-hidden="true">
                                <div class="modal-dialog">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h5 class="modal-title" id="RestoModalCommentLabel">Avis</h5>
                                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                        </div>
                                        <div class="modal-body"></div>
                                    </div>
                                </div>
                            </div>
                    
                        </li> `
                    

                }
                ul.innerHTML = li;
                restoContainer.appendChild(ul);
                restos.forEach(resto=>{

                    let id_resto = resto.id_resto
                    let noteGlobales=resto.globalNote
                    printNodeGlobale(document.querySelectorAll("#etoile_"+id_resto+">i"),noteGlobales)

                }) 


            }else{
                restoContainer.style.textAlign = "center"
                restoContainer.innerHTML += "Aucun restaurant pastillé pour le moment";
                invitationsContainer.innerHTML = "";               
                invitationsContainer.style.display = "none"
                photosContainer.style.display = "none"
                photosContainer.innerHTML = "";
            }


    });

    let rows = document.querySelectorAll("#restaurants > ul.list-group > li.list-group-item");

    if(document.querySelector("#resto-rech")){
        document.querySelector("#resto-rech").addEventListener("keyup", function (event) {
            const q = event.target.value.toLowerCase();

            if (event.keyCode === 13) {
                FindResto(event.target)
            }else{
                document.querySelectorAll("#restaurants > ul > li").forEach(elem=>{
                    if(elem.textContent.toLowerCase().includes(q)){
                        elem.style = "display : flex!important;"
                    }else{
                        elem.style = "display : none !important;"
                    }
                })
            }
            
        });
    }
}

function printNodeGlobale(element,globalNote){

    let rankRange = [1, 2, 3, 4]
    for (let star of element) {
        console.log(star)
        if (rankRange.includes(parseInt(star.dataset.rank, 10))) {
            if(parseInt(star.dataset.rank, 10) <= Math.trunc(globalNote))
                    star.style.color = "#F5D165"
            if (globalNote % 1 != 0) {
                //console.log(parseInt(star.dataset.rank, 10)+" "+(Math.trunc(globalNote) + 1))
                if (parseInt(star.dataset.rank, 10) == (Math.trunc(globalNote) + 1)) {
                      //console.log(parseInt(star.dataset.rank, 10)+" "+(Math.trunc(globalNote) + 1))
                    let rateYello = (globalNote % 1) *100
                    let rateBlack=100 -rateYello
                    star.style = `
                     background: linear-gradient(90deg, #F5D165 ${rateYello}%, #000 ${rateBlack}%);
                    -webkit-background-clip: text;
                    -webkit-text-fill-color: transparent;
                    `
                    
                }
            }
        }
    }
}

function getPub(pub_id, message, confid) {
    document.querySelector("#pub_id_modif").value = pub_id;
    document.querySelector("#option_modif").value = confid;
    document.querySelector("#message-text_modif").innerHTML = message;
}

function updatePublication() { 

		let data = {
		"pub_id": document.querySelector("#pub_id_modif").value,
		"confidentiality": document.querySelector("#option_modif").value,
		"message": document.querySelector("#message-text_modif").value
		}

		fetch(new Request("/user/tribu/update_publication/{{ table_pub }}", {
		method: "POST",
		headers: {
		'Accept': 'application/json',
		'Content-Type': 'application/json'
		},
		body: JSON.stringify(data)
		}));

        location.reload();
	
}

function setReaction(pub_id, reaction) {

    let table_reaction = "{{ table_pub }}".replace(/_publication$/, "_reaction")

    let data = {
        "pub_id": pub_id,
        "user_id_pub": document.querySelector("#user_id_" + pub_id).value,
        "is_like": reaction,
        "table_reaction": table_reaction
    }

    fetch(new Request("/user/tribu/new_reaction", {
        method: "POST",
        headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
    })).then(x => x.json()).then(response => console.log(response));

}

function IsLike(pub_id, x) {
    if (x.classList == "bi-heart-fill") {
        x.classList.remove("bi-heart-fill")
        x.classList.toggle("bi-heart");
        x.style.color = "black";
        setReaction(pub_id, 0);
    } else {
        x.classList.remove("bi-heart")
        x.classList.add("bi-heart-fill");
        x.style.color = "red";
        setReaction(pub_id, 1);
        console.log("addedd...")
    }

}

let boutons = document.querySelectorAll("[id^=submitComment_]");
let forms = document.querySelectorAll("[id^=form_]");
forms.forEach((bouton) => {

    let i = bouton.id.replace(/[^0-9]/g, "");
    
    bouton.addEventListener("submit", (e) => {
        e.preventDefault();
        let data = {
            "table_com": table_com,
            "pub_id": document.querySelector("#pub_id_" + i).value,
            "user_id_pub": document.querySelector("#user_id_" + i).value,
            "new_comment": document.querySelector("#newComment_" + i).value,
            "audio" : document.querySelector("#audio_" + i) ? document.querySelector("#audio_" + i).src : ""
        }

        if (document.querySelector("#newComment_" + i).value != "" || document.querySelector("#audio_" + i) != null) {

            fetch(new Request("/user/tribu/new_commentaire", {
                method: "POST",
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            }));

            document.querySelector("#newComment_" + i).value = "";
            bouton.querySelector("#soundClips > div.clip").remove();
            bouton.querySelector("#soundClips > div.iconeDelete").remove();
            bouton.querySelector("#soundClips").style.display="none"

        } else {
           
            document.querySelector("#comment_vide_" + i).style.display = "block";
            setTimeout(() => {
                document.querySelector("#comment_vide_" + i).style.display = "none";
            }, 2000);
        }
    });

    let pubId = bouton.id.replace(/[^0-9]/g, "");

    let source = new EventSource("/events/commentaires?pub_id=" + pubId + "&table=  {{ table_pub }}", { withCredentials: true });
    source.onmessage = function (event) {
        let nbrReact = JSON.parse(event.data)[0].reaction;
        let contentNbReaction = document.querySelector("#nombreReaction" + pubId);
        if (nbrReact > 0) {
            contentNbReaction.textContent = nbrReact
        } else {
            contentNbReaction.textContent = "";
        }
        if(JSON.parse(event.data)[0].reactionStatus == 1){
            contentNbReaction.nextElementSibling.classList.remove("bi-heart");
            contentNbReaction.nextElementSibling.classList.add("bi-heart-fill");
            contentNbReaction.nextElementSibling.style.color = "red";
        }else{
            contentNbReaction.nextElementSibling.classList.remove("bi-heart-fill");
            contentNbReaction.nextElementSibling.classList.add("bi-heart");
            contentNbReaction.nextElementSibling.style.color = "black";
        }
        let comments = "";
        let commentSize = JSON.parse(event.data)[0].comments.length;
        if (commentSize > 0) {
            document.querySelector("#commentNotnul_" + pubId).style.display = "block";
            document.querySelector("#nbComment" + pubId).innerHTML = commentSize + " <i class='bi bi-chat-square'></i>";
        }else{
            document.querySelector("#commentNotnul_" + pubId).style.display = "none";
            document.querySelector("#nbComment" + pubId).innerHTML = "<i class='bi bi-chat-square'></i>";
        }
        function showRemoveUpdateComment(id){
            let drop = `<span class="float-end dropstart">
                <span id="modifComs" class="float-end" style="cursor:pointer" data-bs-toggle="dropdown">
                    <i class="bi bi-three-dots" style="cursor:pointer"></i>
                </span>
                <ul class="dropdown-menu">
                    <li>
                        <button data-bs-toggle="modal" data-bs-target="#modal_commentaire_modif" class="dropdown-item" onclick="restoreComment(${id})" >Modifier</button>
                    </li>
                    <li>
                        <button onclick="confirmComment(${id})" data-bs-toggle="modal" data-bs-target="#deleteCommModalConfirm" class="dropdown-item" >Supprimer</button>
                    </li>
                </ul>
            </span>`;
            return drop;
        }
        let dropContent = "";

        const commentsEvent = JSON.parse(event.data)[0].comments;

        let newCommentsToShow = commentsEvent.filter(comment => document.querySelector("#comment"+comment.id))

        for (let result of JSON.parse(event.data)[0].comments) {
            
            let audio = "";
            if(result.audioname){
                audio = `<audio controls class="mt-2" src="/uploads/tribu_t/audios/{{table_tribu}}/${result.audioname}"></audio>`;
            }
            if(result.user_id != {{ app.user.id }}){
                dropContent = "";
            }else{
                dropContent = showRemoveUpdateComment(result.id);
            }
            comments += `<div class="row card m-1 pt-2 pl-3">
                                            <label><i class="bi bi-person-circle"></i>
                                            <a href="/user/profil/${result.user_id
                }"> ${result.userfullname
                } </a><small>${diff4humans(new Date(JSON.parse(event.data)[0].now_date), new Date(result.datetime))
                }</small>${dropContent}
                                            </label><p id="content_comment_number_${result.id}">${result.commentaire
                }<br>${audio}</p>
                                        </div>`;
        }
        document.querySelector("#comment" + pubId + " > div").innerHTML = comments;
    };


    var mediaRecorder
    let record = bouton.querySelector("#start")
    let stop = bouton.querySelector("#stop")
    let soundClips = bouton.querySelector("#soundClips")

    let dateForName = new Date();
    let month = parseInt(dateForName.getMonth()) + 1
    if(String(month).length < 2){
        month = String("0"+month)
    }

    let dateString = dateForName.getDate() + "_" + month + "_" + dateForName.getFullYear();

    record.addEventListener('click', event => {
        if (navigator.mediaDevices) {
        //console.log("getUserMedia supported.");

        const constraints = { audio: true };
        let chunks = [];

        navigator.mediaDevices
            .getUserMedia(constraints)
            .then((stream) => {
            mediaRecorder = new MediaRecorder(stream);

            //visualize(stream);

            mediaRecorder.start();
            //console.log(mediaRecorder.state);
            console.log("recorder started");
            record.style.display = "none";
            stop.style.display = "block";

            mediaRecorder.onstop = (e) => {
                console.log("data available after MediaRecorder.stop() called.");

                //const clipName = prompt("Enter a name for your sound clip");

                const clipName = dateString+".oga";
                const clipContainer = document.createElement("div");
                const iconContainer = document.createElement("div");
                //clipContainer.classList.add("container");
                clipContainer.classList.add("col-5");
                iconContainer.classList.add("col-1");
                const audio = document.createElement("audio");
                audio.id = "audio_"+i;
                const deleteButton = document.createElement("i");

                clipContainer.classList.add("clip");
                iconContainer.classList.add("iconeDelete");
                audio.setAttribute("controls", "");
                audio.classList.add("ml-5");
                deleteButton.classList.add("bi");
                deleteButton.classList.add("bi-trash3");
                deleteButton.style.color = "red"
                deleteButton.style.marginLeft = "5px"
                deleteButton.style.cursor = "pointer"
                deleteButton.style.fontSize = "30px"
                clipContainer.appendChild(audio);
                iconContainer.appendChild(deleteButton);
                soundClips.appendChild(clipContainer);
                soundClips.appendChild(iconContainer);
                soundClips.classList.add("mt-3");

                bouton.querySelector("#soundClips").style.display = ""
                
                audio.controls = true;
                const blob = new Blob(chunks, { type: "audio/mp3; codecs=opus" });
                chunks = [];
                //console.log(blob)
                //const audioURL = URL.createObjectURL(blob);
                //audio.src = audioURL;
                //console.log("recorder stopped");

                var reader = new FileReader();
                reader.readAsDataURL(blob);
                reader.onloadend = function () {
                var base64String = reader.result;
                audio.src = base64String
                //console.log('Base64 String - ', base64String);
                }

                deleteButton.onclick = (e) => {
                const evtTgt = e.target;
                evtTgt.parentNode.parentNode.removeChild(evtTgt.parentNode.previousElementSibling);
                evtTgt.parentNode.parentNode.removeChild(evtTgt.parentNode);
                soundClips.classList.remove("mt-3");
                //evtTgt.parentNode.parentNode.remove();
                };
            };

            mediaRecorder.ondataavailable = (e) => {
                chunks.push(e.data);
            };
            })
            .catch((err) => {
            alert("Veuillez vérifier votre micro !");
            console.error(`The following error occurred: ${err}`);
            });
        }
    });

    stop.addEventListener('click', event => {
        mediaRecorder.stop();
        //console.log(mediaRecorder.state);
        console.log("recorder stopped");
        record.style.display = "block";
        stop.style.display = "none";
    });

})

function removePub(btn, id){
    btn.parentElement.parentElement.parentElement.parentElement.parentElement.remove();
    fetch(new Request("/user/tribu/publication/remove/{{ table_pub}}/" + id, {
        method: "GET",
        headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        }
    })).then(rqt => rqt.json()).then(data => console.log(data));
}

function confirmComment(pub_id){
            
    document.querySelector("#data-pub-id-comm").value = pub_id;

}

function confirm(pub_id){
            
    document.querySelector("#data-pub-id").value = pub_id;

}

function removePublication(elem){
    document.querySelector("#pub_number_"+elem.value+"_remove").remove();
    fetch(new Request("/user/tribu/publication/remove/{{ table_pub}}/" + elem.value, {
        method: "GET",
        headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        }
    })).then(rqt => rqt.json()).then(data => console.log(data));

}

function removeCommentaire(comment_id){
    document.querySelector("#content_comment_number_"+comment_id.value).parentElement.remove();
    fetch(new Request("/user/tribu/publication/remove/"+table_com+"/" + comment_id.value, {
        method: "GET",
        headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        }
    })).then(rqt => rqt.json()).then(data => console.log(data));
}

function restoreComment(id){
    let contetComs = document.querySelector("#content_comment_number_"+id);
    document.querySelector("#comment_id_modif").value = id;
    document.querySelector("#comment_text_modif").value = contetComs.textContent;

}

function updateCommentaire(){
    let data = {
        id : document.querySelector("#comment_id_modif").value,
        commentaire : document.querySelector("#comment_text_modif").value
    }
    
    fetch(new Request("/user/tribu/update_comment/"+table_com, {
        method: "POST",
        headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
    })).then(x => x.json()).then(response => console.log(response));
    
}

function diff4humans(dateEnd, dateStart) {
    var delta = Math.round((dateEnd - dateStart) / 1000); // en seconde

    var minute = 60,
        hour = minute * 60,
        day = hour * 24,
        week = day * 7;

    var fuzzy;

    if (delta < 30) {
        fuzzy = "à l'instant";
    } else if (delta < minute) {
        fuzzy = 'il y a ' + delta + ' seconds';
    } else if (delta < 2 * minute) {
        fuzzy = 'il y a 1 minute'
    } else if (delta < hour) {
        fuzzy = 'il y a ' + Math.floor(delta / minute) + ' minutes';
    } else if (Math.floor(delta / hour) == 1) {
        fuzzy = 'il y a 1 heure'
    } else if (delta < day) {
        fuzzy = 'il y a ' + Math.floor(delta / hour) + ' heures';
    } else if (delta < day * 2) {
        fuzzy = 'hier';
    } else {
        fuzzy = 'il y a ' + Math.floor(delta / day) + ' jours';
    }

    return fuzzy;
}

let profilTribu = document.querySelector("#profilTribu");
let fileInputTribu = document.querySelector("#fileInputTribu");
let avatarTribu = "";

if(fileInputTribu ){
fileInputTribu.addEventListener("change", (e) => {

        ///read file
        const reader = new FileReader();

        ////on load file
        reader.addEventListener("load", () => {

            avatarTribu = reader.result;

            //console.log(avatarTribu);

            // Change profil
            profilTribu.src = avatarTribu

            let table = tbl_pub.replace(/_publication$/, "")

            let data = {
            image : avatarTribu
            }

            fetch(new Request("/user/tribu/update/avatar/"+table, {
                method: "POST",
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })).then(x => x.json()).then(response => console.log(response));

        });

        ///run event load in file reader.
        reader.readAsDataURL(e.target.files[0]);

    }
)
}

document.querySelectorAll("#navBarTribu > li.listNavBarTribu > a").forEach(menu=>{
    
    menu.addEventListener("click", function(){
        document.querySelectorAll("#navBarTribu > li.listNavBarTribu > a").forEach(item=>{
            item.classList.remove("active")
            item.classList.remove("text-white")
            item.classList.add("text-primary")
        })
        if(menu.classList.contains("active") && menu.classList.contains("text-white") ){
            menu.classList.remove("active")
            menu.classList.remove("text-white")
        }else{
            menu.classList.add("active")
            menu.classList.add("text-white")
        }
        
    })
})

function FindResto(elem){
    let val = document.querySelector("#resto-rech").value;

    document.querySelector("#result_resto_past").style.display ="block"

    let loading =`<button class="btn btn-primary mt-4" type="button" disabled>
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                Chargement...
                </button>`

    document.querySelector("#result_resto_past").innerHTML = loading;
    
    fetch("/user/tribut/get_resto/"+tableTribu+"_restaurant/"+val)
    .then(res => res.json())
    .then(data =>{
        //console.log(data)
        let avatar = data.avatar
        let list = data.list
        if(list.length > 0){
            //document.querySelector("#result_resto_past").style.display ="block"
            let res =""
            //console.log(data)
            for(let resto of list){
                let avtr = "{% if avatar != null %} {{ asset("uploads/tribu_t/photos/{{table_tribu}}/") ~ avatar}} {% else %} {{ asset("uploads/tribu_t/photos/avatar_tribu.jpg") }} {% endif %}"
                if(resto.isPelleted == 1){
                    res += ""//"<li class='list-group-item list-group-item-action' style='list-style:none;'><img id='roundedImg' style='min-height: 40px; min-width:40px; max-width:40px; max-height: 40px;' class='rounded-circle border border-1' src="+avtr+"><a href='#' data-idresto='"+resto.id+"' data-isPelleted ='true'> "+resto.denomination_f.trim()+"</a><small class='float-end text-danger'><i>Déjà pastillé</i></small></li>"
                
                }else{
                    res+=`<li class="list-group-item d-flex justify-content-between align-items-start">
                        <div class="ms-2 me-auto">
                            <div class="fw-bold" data-isPelleted ='false'>${resto.denomination_f.trim()}</div>
                            <i style="font-size:small;">${resto.adresse.trim().toLowerCase()}</i>
                        </div>
                        <input type="button" class="btn btn-primary h-100" value="Pastiller" id="pastille-btn" onclick="pastillerPast('${resto.id}','${resto.denomination_f.trim()}')">
                        
                    </li>`
                    //res += "<li class='list-group-item list-group-item-action' style='list-style:none;'><a href='#' data-idresto='"+resto.id+"' data-isPelleted ='false'>"+resto.denomination_f.trim()+"</a><small class='float-end'><i>"+resto.adresse.trim().toLowerCase()+"</i></small></li>"
                
                }
                //let adress = resto.numvoie.trim()+' '+resto.typevoie.trim()+' '+resto.nomvoie.trim()+' '+resto.codpost.trim()+', '+resto.compvoie.trim()+' '+resto.commune.trim()
                //console.log(resto.denomination_f)
            }
            document.querySelector("#result_resto_past").innerHTML ="<ul class='list-group' style='overflow-y:scroll;height:120px;'>"+res+"</ul>"
        
        }else{
            
            document.querySelector("#result_resto_past").innerHTML ="<b class='text-danger'>Aucun resultat ne correspond votre recherche</b>"
        }
        
    })
}

function saveRestaurantPast(id, nom){
    let data ={
        name : nom,
        id_resto :id
    }
    //console.log(data);

    fetch(new Request("/user/tribut/save_resto/"+tableTribu+"_restaurant", {
        method: "POST",
        headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
        })).then(req => req.json()).then(message => {
            console.log(message);
    })

    document.querySelector("#result_resto_past").style.display="none";
}


function pastillerPast(id,nom){
    saveRestaurantPast(id, nom);

    let xmlString = `<div class="alert alert-success mb-2 mt-2" role="alert">
    ${nom} bien pastillé avec succès!
    </div>`;

    showResto();

    document.querySelector("#form_past").innerHTML = xmlString;

    setTimeout(()=>{
        document.querySelector("#form_past").innerHTML = ""
    }, 5000)
    
}


function createRepas(id_pastille, nom, lat, long){

    console.log("id_pastille : "+id_pastille)
    console.log("nom : "+nom)

    document.querySelector("#agenda-fetched").innerHTML= ""
    document.querySelector("#agenda-fetched-past").innerHTML=`
                    <div id="form_event" style="display: block;">
						<div class="row g-2 mt-2">
							<div class="col-md" style="display:none;">
								<div class="form-floating">
									<select class="form-select" id="agenda-type" onchange="eventAgendaType(this, '2023-05-18 00:00:01')">
										<option id="repas" value="4" selected>Repas</option>
																	
									</select>
									<label for="floatingSelectGrid">Type d'agenda</label>
								</div>
							</div>
							<div class="col-md">
								<div class="form-floating">
									<input type="text" class="form-control" id="agenda-title" placeholder="Ecire le titre">
									<label for="floatingInputGrid">Titre</label>
								</div>
							</div>
							
						</div>

						<div id="choixRepas" class="row g-2 mt-2" style="">
							<div class="col-8">
								<div class="form-floating">
									<input type="text" class="form-control" id="restaurant" placeholder="Rechercher" disabled>
									<label for="restaurant">Restaurant</label>
								</div>
								
							</div>

							<div class="col-4">
								<div class="form-floating">
									<input type="number" class="form-control" id="participant" min="0" value="50">
									<label for="participant">Participants</label>
								</div>
								
							</div>
							
						</div>

						<div class="row g-2 mt-2">
							<div class="col-12">
								<div class="form-floating">
									<input type="text" class="form-control" id="agenda-desc" value="">
									<label for="floatingInputGrid">Déscription</label>
								</div>
								
							</div>
							
						</div>
						
						<div class="row g-2 mt-2">
							<div class="col-6">
								<div class="form-floating">
									<input type="datetime-local" class="form-control" id="agenda-from" value="2023-05-18 00:00:01">
									<label for="floatingInputGrid">De</label>
								</div>
							</div>
							<div class="col-6">
								<div class="form-floating">
									<input type="datetime-local" class="form-control" id="agenda-to" value="2023-05-18 23:59:59">
									<label for="floatingInputGridd">Au</label>
								</div>
							</div>
						</div>

						<span onclick="openMapPast()" class="btn btn-light"><i class="bi bi-geo-alt-fill"></i> Afficher sur la carte</span>
						<input type="hidden" id="agenda-lat">
						<input type="hidden" id="agenda-lng">
						<div class="row g-2 mt-2 mb-2" style="display:none;" id="div-map">
							<div id="new_map" style="width:100%; height : 150px;"></div>
						</div>

						<div class="alert alert-success mt-2 mb-2" role="alert" style="display:none;" id="agenda-success"><i class="bi bi-check2-circle"> </i>
							Agenda sauvegardé avec succès
						</div>

						<div class="row g-2 mt-2">
							<input type="button" class="btn btn-outline-primary" onclick="saveAgenda()" id="" value="Enregistrer">
						</div>

					</div>`

    document.querySelector("#restaurant").setAttribute("data-idresto",id_pastille)
    document.querySelector("#restaurant").value = nom
    document.querySelector("#agenda-lat").value = lat
    document.querySelector("#agenda-lng").value = long

}

function openMapPast(){

    document.querySelector("#div-map").style.display ="block"

    let lat = document.querySelector("#agenda-lat").value
    let long = document.querySelector("#agenda-lng").value

    document.querySelector('#div-map').innerHTML = "<div id='new_map' style='width: 100%; height: 200px;'></div>";
    var osmUrl = 'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', osmAttribution = '&copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors' ,

    osmLayer = new L.TileLayer(osmUrl, {maxZoom: 20, attribution: osmAttribution});

    map = new L.Map('new_map');
    map.setView(new L.LatLng(lat,long), 13 );
    map.addLayer(osmLayer);
    L.marker([lat, long]).addTo(map)

}

function showPartisant(table_tribu){

    invitationsContainer.innerHTML = "";               
    invitationsContainer.style.display = "none"
    restoContainer.style.display = "none"
    restoContainer.innerHTML += "";
    partisantContainer.style.display = "block"
    showCreatePub.style.display = "none"
    showCreatePub_mobile.style.display = "none"
    showPub.style.display = "none"

    partisantContainer.innerHTML = `<div class="mt-3 d-flex justify-content-center">
            <div class="spinner-border" role="status">
            <span class="sr-only">Loading...</span>
            </div>
        </div>`;

    fetch(new Request("/user/tribu/fetch-member/" + table_tribu))
    .then(rqt => rqt.text()).then(data => {
            //console.log(data);
            partisantContainer.innerHTML = data;

        });

}

var loadFile = (event) => {

    let new_photo = document.createElement("img")
    new_photo.setAttribute("data-bs-toggle","modal")
    new_photo.setAttribute("data-bs-target","#modal_show_photo")
    new_photo.setAttribute("onclick","setPhotoTribu(this)")
    new_photo.src = URL.createObjectURL(event.target.files[0]);
    var div_photo = document.querySelector('#gallery');

    let first_photo = document.querySelector("#gallery > img:nth-child(1)")

    div_photo.insertBefore(new_photo, first_photo);

    const fileReader = new FileReader();
    fileReader.onload = () => {
        const srcData = fileReader.result;

        let data = {
                publication : "",
                image : srcData,
                confidentiality : 1
            }

        fetch(new Request("/user/tribu/add_photo/"+tableTribu+"_publication", {
            method: "POST",
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        })).then(x => x.json()).then(response => {
            document.querySelector("#success_upload").style ="display:block;"
            setTimeout(function(){
                 document.querySelector("#success_upload").style ="display:none;"
            }, 5000);
            console.log(response)
            }
        ).catch(error=>{
            console.log(error)
        });
    };
    fileReader.readAsDataURL(event.target.files[0]);
}

</script>